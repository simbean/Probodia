package com.probodia.foodservice.api.controller;import com.probodia.foodservice.api.entity.FoodInfo;import com.probodia.foodservice.api.mapper.foodinfo.FoodInfoMapper;import com.probodia.foodservice.api.service.FoodApiService;import com.probodia.foodservice.api.dto.*;import com.probodia.foodservice.config.rabbitmq.RabbitMqConfig;import com.probodia.foodservice.utils.FoodInfoSortVo;import com.probodia.foodservice.utils.PageInfoUtil;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.data.domain.Page;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.nio.charset.StandardCharsets;import java.util.*;@RestController@RequiredArgsConstructor@RequestMapping("/api")@Slf4j@Api(value = "FoodApi Controller", description = "음식 정보 조회")public class FoodApiController {    private final FoodApiService foodApiService;    private final RabbitTemplate rabbitTemplate;    private final RabbitMqConfig rabbitMqConfig;    @GetMapping("/detailFoodInfo/{foodId}")    @ApiOperation(value = "food Id로 전체 기록을 가져온다.", notes = "모든 기록을 가져온다.")    public ResponseEntity<FoodInfoDto>getFoodDetail(@PathVariable String foodId){        log.info("Request Food Id : {}",foodId);        Optional<FoodInfo> byId = foodApiService.findById(foodId);        if(byId.isEmpty()) throw new NoSuchElementException("Cannot found Food with FoodId");        FoodInfoDto ret = FoodInfoMapper.INSTANCE.toDto(byId.get());        rabbitTemplate.convertAndSend(rabbitMqConfig.getExchageName(), rabbitMqConfig.getRoutingKey(),                ret);        return ResponseEntity.status(HttpStatus.OK)                .body(ret);    }    @PostMapping("/detailFoodInfos")    public ResponseEntity<List<FoodInfoDto>> getFoodDetails(@RequestBody List<String> foodIds){        log.debug("REQUEST : {}",foodIds);        return ResponseEntity.status(HttpStatus.OK).body(foodApiService.findByIds(foodIds));    }    @GetMapping("/getFoodsByName/{foodName}")    @ApiOperation(value = "food name으로  연관된 food name과 Id를 가져온다.", notes = "모든 기록을 가져온다.")    public ResponseEntity<PagingFoodNameDto>getFoodDetail2(@PathVariable String foodName, @RequestParam Integer page,                                                           @RequestParam Integer size){        Page<FoodInfo> pageFoodInfo = foodApiService.getAllByFoodNamePaging(page - 1,size,"%" + foodName + "%");        PageInfoUtil pageInfo = new PageInfoUtil(page,size,(int) pageFoodInfo.getTotalElements(), pageFoodInfo.getTotalPages());        List<FoodInfo> foodInfos = pageFoodInfo.getContent();        List<FoodInfoSortVo> sortedInfo = new ArrayList<>();        for(int i=0;i<foodInfos.size();i++){            FoodInfo f = foodInfos.get(i);            int missingColumn = 0;            if(f.getCalories()==-1.0) missingColumn++;            if(f.getCarbohydrate()==-1.0) missingColumn++;            if(f.getSugars()==-1.0) missingColumn++;            if(f.getProtein()==-1.0) missingColumn++;            if(f.getFat()==-1.0) missingColumn++;            if(f.getTransFat()==-1.0) missingColumn++;            if(f.getSaturatedFat()==-1.0) missingColumn++;            if(f.getCholesterol()==-1.0) missingColumn++;            if(f.getSalt()==-1.0) missingColumn++;            int nameLength = f.getName().length();            sortedInfo.add(new FoodInfoSortVo(missingColumn,nameLength,i));        }        Collections.sort(sortedInfo);//        sortedInfo.stream().forEach(r -> log.info("MISSING : {}, name : {}", r.getMissingColumn(),r.getNameLength()));        List<FoodNameDto> foodVo = new ArrayList<>();        sortedInfo.forEach(s -> foodVo.add(new FoodNameDto(foodInfos.get(s.getIdx()).getName(),foodInfos.get(s.getIdx()).getId())));//        foodInfos.stream()//                .forEach(f -> {//                    foodVo.add(new FoodNameDto(f.getName(),f.getId()));//                });        return ResponseEntity.status(HttpStatus.OK)                .body(new PagingFoodNameDto(foodVo,pageInfo));    }    @GetMapping("/testRabbit/{num}")    public String testRabbit(@PathVariable Integer num){        log.debug("ROUTING : {}",rabbitMqConfig.getRoutingKey());        String s = "박서진";        byte[] utf8 = s.getBytes(StandardCharsets.UTF_8);        RabbitMqTestDto ret = new RabbitMqTestDto("박서진", 13);        rabbitTemplate.convertAndSend(rabbitMqConfig.getExchageName(), rabbitMqConfig.getRoutingKey(),                ret);        log.debug("ret name : {}",ret.getName());        return "GOOD";    }}